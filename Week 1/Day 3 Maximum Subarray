/*
Dificulty Rating= 4/10 (Requires concept of Kaden's Algorithm)
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty())
            return 0;
        int largest=nums[0],currSum=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            currSum=max(currSum+nums[i],nums[i]); // currSum holds the value of sum of the element
            if(currSum>largest)
                largest=currSum;// largest stores the maximum sum
        }
        return largest;
    }
};

Time Complexity:- O(n)
Space Complexity:- O(1)
