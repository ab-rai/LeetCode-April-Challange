/*
Difficulty Level=5/10 (requires carefull observation )
Say you have an array prices for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like 
(i.e., buy one and sell one share of the stock multiple times).
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 
constraints:
    1 <= prices.length <= 3 * 10 ^ 4
    0 <= prices[i] <= 10 ^ 4
*/

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int sum=0,len=prices.size();
        for(int i=1;i<len;i++)
        {
            if(prices[i]>prices[i-1])
            {
                sum+=(prices[i]-prices[i-1]);// counting each and every increment in the stock price 
            }                                // and buying and selling to maximise profit at every increase in price
        }
        return sum;
    }
};
/*
TIme Complexity:- O(n)
Space Complexity:- O(1)

Approach 2:- Could also be solved by applying local minima and maxima concept.
             Buying at every local minima and selling at every local maxima.
*/
