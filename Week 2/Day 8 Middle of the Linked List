/*
Difficulty Rating=5/10 (linked list traversal with conditions)
Given a non-empty, singly linked list with head node head, return a middle node of linked list.
If there are two middle nodes, return the second middle node.
 
Note:
  The number of nodes in the given list will be between 1 and 100.
  */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode * slow=head,*fast=head;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next; // increasing slow pointer only once and fast twice will result to have slow poniter position
            fast=fast->next; // in the mid of the linked list at the time when fast reaches to the end of the linked list
            if(fast!=NULL)
                fast=fast->next;
        }
        return slow;
    }
};
//Time Complexity:- O(n)
//Space Complexity:- O(1)
