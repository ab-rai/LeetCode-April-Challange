Given two strings text1 and text2, return the length of their longest common subsequence.
A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing
the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two 
strings is a subsequence that is common to both strings.

 If there is no common subsequence, return 0.
 
 class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int len1=text1.size(),len2=text2.size();
        if(len1==0||len2==0)
            return 0;
        int arr[len1][len2];
        for(int i=0;i<len1;i++)
            for(int j=0;j<len2;j++)
                arr[i][j]=0;
        if(text1[0]==text2[0])
            arr[0][0]=1;
        for(int j=1;j<len2;j++)
        {
            if(text1[0]==text2[j])
            {
                arr[0][j]=1;
            }
            else
            arr[0][j]=arr[0][j-1];
        }
        for(int i=1;i<len1;i++)
        {
            if(text1[i]==text2[0])
            {
                arr[i][0]=1;
            }
            else
            arr[i][0]=arr[i-1][0];
        }
        for(int i=1;i<len1;i++)
        {
            for(int j=1;j<len2;j++)
            {
                if(text1[i]==text2[j])
                {
                    arr[i][j]=arr[i-1][j-1]+1;
                }
                else arr[i][j]=max(arr[i-1][j],arr[i][j-1]);
              }
        }
        return arr[len1-1][len2-1];
    }
};
