/*
Difficulty Rating=5/10 (require observation and stack concepts in my approach, can be done without using stack also)
Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.
Note that after backspacing an empty text, the text will continue empty.

Example 1:
Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".

Example 2:
Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".

Example 3:
Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".

Example 4:
Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".

Note:
  1 <= S.length <= 200
  1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.
Follow up:
Can you solve it in O(N) time and O(1) space?
*/

class Solution {
public:
    bool backspaceCompare(string S, string T) {
        stack<char> st;
        string s2,t2;
        for(char ch:S)
        {
            if(ch=='#')
            {
                if(!st.empty())
                    st.pop(); // deleting from stack if it is not empty
            }
            else st.push(ch); // inserting the character if it is not='#
        }
        while(!st.empty())
        {
            s2+=st.top();  // making the new string to compare for equality
            st.pop();
        }
        reverse(s2.begin(),s2.end()); // reversing since stack is LIFO
        for(char ch:T)
        {
            if(ch=='#')
            {
                if(!st.empty())
                    st.pop();
            }
            else st.push(ch);
        }
        while(!st.empty())
        {
            t2+=st.top();
            st.pop();
        }
        reverse(t2.begin(),t2.end());
        if(s2.size()!=t2.size())
            return false;
        for(int i=0;i<s2.size();i++)
        {
            if(s2[i]!=t2[i])
                return false;
        }
        return true;
    }
};

/*
Time Complexity:- O(n)
Space Complexity:- O(n)

Approach 2 for follow up:-
    This question could be done by traversing the string from reverse 
 */
