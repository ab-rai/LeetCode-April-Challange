Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child 
connections. The path must contain at least one node and does not need to go through the root.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int helper(TreeNode* root,int &ans)
    {
        if(root==NULL) return 0;
        if(root->left==NULL && root->right==NULL) 
            {
            ans=max(ans,root->val);
            return root->val;
            }
        int l=helper(root->left,ans);
        int r=helper(root->right,ans);
        ans=max(ans,max(root->val+max(l,r),root->val+l+r));
        return max(root->val,root->val+max(l,r));
    }
    int maxPathSum(TreeNode* root) {
        int ans=root->val;
        int temp=helper(root,ans);
        return ans;
    }
};
