/*
Difficulty Level=5
(This problem is an interactive problem.)
Premium Question
*/

class Solution {
public:
    int myBinarySearch(BinaryMatrix &binaryMatrix,int row,int colSize)
    {
        int l=0,r=colSize-1;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(binaryMatrix.get(row,mid)==1)
                r=mid-1;
            else l=mid+1;
        }
        return r+1;
    }
    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {
        vector<int> dim=binaryMatrix.dimensions();
        int rowSize=dim[0];
        int colSize=dim[1];
        int mn=INT_MAX;
        for(int i=0;i<rowSize;i++)
        {
            int searchIndex=myBinarySearch(binaryMatrix,i,colSize);
            if(searchIndex==-1)
                searchIndex=colSize;
            mn=min(mn,searchIndex);
            if(mn==0)
                return mn;
        }
        return (mn==colSize)?-1:mn;
    }
};

//Time Complexity:-O(nlogm) , could be done in O(m+n) using another approach
//Space Complexity:-O(1)
